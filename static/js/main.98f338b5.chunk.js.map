{"version":3,"sources":["components/Section.js","components/ContactListItem.js","components/ContactList.js","components/ContactEditor.js","components/Filter.js","components/App.js","index.js"],"names":["Section","title","children","defaultProps","ContactListItem","name","number","onRemove","type","className","onClick","ContactList","contacts","onRemovecontact","length","map","id","key","INIT","ContactEditor","state","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onAddContact","this","onSubmit","htmlFor","onChange","Component","Filter","onChangeFilter","PropTypes","string","App","filter","addContact","contact","uuidv4","find","alert","prevState","removeContact","contactId","changeFilter","getFilterName","toLowerCase","includes","savedContacts","localStorage","getItem","JSON","parse","setItem","stringify","filterContacts","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.98f338b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.defaultProps = {\r\n  title: '',\r\n};\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ name, number, onRemove }) => (\r\n  <li>\r\n    <span>\r\n      {name}: {number}\r\n    </span>\r\n    <button type=\"button\" className=\"deleteBtn\" onClick={onRemove}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ContactListItem from './ContactListItem';\r\n\r\nconst ContactList = ({ contacts, onRemovecontact }) => {\r\n  if (contacts.length > 0) {\r\n    return (\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <ContactListItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onRemove={() => onRemovecontact(id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onRemovecontact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ContactList from './ContactList';\r\n\r\nconst INIT = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nexport default class ContactEditor extends Component {\r\n  state = INIT;\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddContact(this.state);\r\n    this.setState(INIT);\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <h2>Phonebook</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">\r\n            Name\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n            />\r\n          </label>\r\n          <label htmlFor=\"number\">\r\n            Number\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nContactList.PropTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Filter({ value, onChangeFilter }) {\r\n  return (\r\n    <div>\r\n      <span>Find name</span>\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={({ target }) => onChangeFilter(target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\n\r\nimport Section from './Section';\r\nimport ContactList from './ContactList';\r\nimport ContactEditor from './ContactEditor';\r\nimport Filter from './Filter';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    const savedContacts = localStorage.getItem('contacts');\r\n    if (savedContacts) {\r\n      this.setState({\r\n        contacts: JSON.parse(savedContacts),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  addContact = ({ name, number }) => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n\r\n    const UnicName = this.state.contacts.find(contact => contact.name === name);\r\n    if (UnicName) {\r\n      alert(`${name} is already in contacts!!!`);\r\n    } else {\r\n      this.setState(prevState => {\r\n        return { contacts: [...prevState.contacts, contact] };\r\n      });\r\n    }\r\n  };\r\n\r\n  removeContact = contactId => {\r\n    this.setState(prevState => {\r\n      return {\r\n        contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n      };\r\n    });\r\n  };\r\n\r\n  changeFilter = filter => {\r\n    this.setState({ filter });\r\n  };\r\n  getFilterName = () => {\r\n    const { contacts, filter } = this.state;\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { filter } = this.state;\r\n    const filterContacts = this.getFilterName();\r\n    return (\r\n      <Section>\r\n        <ContactEditor onAddContact={this.addContact} />\r\n        <h2>Contacts</h2>\r\n\r\n        {filterContacts.length > 0 && (\r\n          <Filter value={filter} onChangeFilter={this.changeFilter} />\r\n        )}\r\n\r\n        <ContactList\r\n          contacts={filterContacts}\r\n          onRemovecontact={this.removeContact}\r\n        />\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}